{"version":3,"sources":["components/main/fighter.js","components/main/fighterbox.js","components/main/score.js","components/main/main.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["Fighter","handleClick","props","onFighterClick","index","className","src","this","fighter","img","alt","onClick","Component","FighterBox","fighters","map","key","name","Score","score","shuffleArray","arr","a","Math","random","sort","b","initFighters","clicked","Main","state","setState","figthers","user","current","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAIqBA,E,2MACnBC,YAAc,WACZ,EAAKC,MAAMC,eAAe,EAAKD,MAAME,Q,wEAKrC,OACE,yBAAKC,UAAU,WACb,yBACEC,IAAKC,KAAKL,MAAMM,QAAQC,IACxBC,IAAI,UACJL,UAAU,UACVM,QAASJ,KAAKN,mB,GAbaW,aCiBtBC,EAhBI,SAAAX,GACjB,OACE,yBAAKG,UAAU,eACZH,EAAMY,SAASC,KAAI,SAACP,EAASJ,GAAV,OAClB,kBAAC,EAAD,CACEI,QAASA,EACTJ,MAAOA,EACPD,eAAgBD,EAAMC,eACtBa,IAAKR,EAAQS,YCNRC,EAHD,SAAAhB,GAAK,OAAI,yBAAKG,UAAU,gBAAf,UAAsCH,EAAMiB,QCE7DC,EAAe,SAAAC,GAAG,OACtBA,EACGN,KAAI,SAAAO,GAAC,MAAI,CAACC,KAAKC,SAAUF,MACzBG,MAAK,SAACH,EAAGI,GAAJ,OAAUJ,EAAE,GAAKI,EAAE,MACxBX,KAAI,SAAAO,GAAC,OAAIA,EAAE,OAEVK,EAAe,CACnB,CACEV,KAAM,iBACNR,IAAK,yBACLmB,SAAS,GAEX,CACEX,KAAM,iBACNR,IAAK,wBACLmB,SAAS,GAEX,CACEX,KAAM,sBACNR,IAAK,0BACLmB,SAAS,GAEX,CACEX,KAAM,eACNR,IAAK,uBACLmB,SAAS,GAEX,CACEX,KAAM,YACNR,IAAK,4BACLmB,SAAS,GAEX,CACEX,KAAM,eACNR,IAAK,sBACLmB,SAAS,GAEX,CACEX,KAAM,gBACNR,IAAK,wBACLmB,SAAS,GAEX,CACEX,KAAM,yBACNR,IAAK,yBACLmB,SAAS,GAEX,CACEX,KAAM,iBACNR,IAAK,yBACLmB,SAAS,IAKQC,E,YACnB,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,eAAiB,SAAAC,GACV,EAAK0B,MAAMhB,SAASV,GAAOwB,QAa9B,EAAKG,SAAS,CACZC,SAAUZ,EACR,EAAKU,MAAMhB,SAASC,KAAI,SAAAP,GACtB,OAAO,eAAKA,EAAZ,CAAqBoB,SAAS,QAGlCK,KAAK,eACA,EAAKH,MAAMG,KADZ,CAEFd,MAAO,MApBX,EAAKY,SAAS,CACZjB,SAAUM,EACR,EAAKU,MAAMhB,SAASC,KAAI,SAACP,EAAS0B,GAChC,OAAOA,IAAY9B,EAAZ,eAAyBI,EAAzB,CAAkCoB,SAAS,IAASpB,MAG/DyB,KAAK,eACA,EAAKH,MAAMG,KADZ,CAEFd,MAAO,EAAKW,MAAMG,KAAKd,MAAQ,OAlBrC,EAAKW,MAAQ,CACXG,KAAM,CACJd,MAAO,GAETL,SAAUM,EAAaO,IAPR,E,sEAyCjB,OACE,yBAAKtB,UAAU,QACb,kBAAC,EAAD,CAAOc,MAAOZ,KAAKuB,MAAMG,KAAKd,QAC9B,kBAAC,EAAD,CACEL,SAAUP,KAAKuB,MAAMhB,SACrBX,eAAgBI,KAAKJ,sB,GA/CGS,aCjDnBuB,EARA,WACb,OACE,4BAAQ9B,UAAU,cAChB,yDCWS+B,G,uLATX,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUO,cCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5acba01.chunk.js","sourcesContent":["//----- Import -----//\nimport React, { Component } from \"react\";\n\n//----- State Change -----//\nexport default class Fighter extends Component {\n  handleClick = () => {\n    this.props.onFighterClick(this.props.index);\n  };\n\n  //----- Render -----//\n  render() {\n    return (\n      <div className=\"fighter\">\n        <img\n          src={this.props.fighter.img}\n          alt=\"fighter\"\n          className=\"picture\"\n          onClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n","//----- Import -----//\nimport React from \"react\";\nimport Fighter from \"./fighter\";\n\n//----- Box Prop Create and Return -----//\nconst FighterBox = props => {\n  return (\n    <div className=\"fighter-box\">\n      {props.fighters.map((fighter, index) => (\n        <Fighter\n          fighter={fighter}\n          index={index}\n          onFighterClick={props.onFighterClick}\n          key={fighter.name}\n        />\n      ))}\n    </div>\n  );\n};\n\n//----- Export -----//\nexport default FighterBox;\n","//----- Import -----//\nimport React from \"react\";\n\n//----- Score Prop Create -----//\nconst Score = props => <div className=\"score-keeper\">Score: {props.score}</div>;\n\n//----- Export -----//\nexport default Score;\n","//----- Imports -----//\nimport React, { Component } from \"react\";\nimport FighterBox from \"./fighterbox\";\nimport Score from \"./score\";\n\n//----- Array and Corresponding Function -----//\nconst shuffleArray = arr =>\n  arr\n    .map(a => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1]);\n\nconst initFighters = [\n  {\n    name: \"Conor Mcgregor\",\n    img: \"img/fighters/conor.png\",\n    clicked: false\n  },\n  {\n    name: \"Cody Garbrandt\",\n    img: \"img/fighters/cody.png\",\n    clicked: false\n  },\n  {\n    name: \"Khabib Nurmogomedov\",\n    img: \"img/fighters/khabib.png\",\n    clicked: false\n  },\n  {\n    name: \"Max Holloway\",\n    img: \"img/fighters/max.png\",\n    clicked: false\n  },\n  {\n    name: \"Nate Diaz\",\n    img: \"img/fighters/natediaz.png\",\n    clicked: false\n  },\n  {\n    name: \"TJ Dillashaw\",\n    img: \"img/fighters/tj.png\",\n    clicked: false\n  },\n  {\n    name: \"Tony Ferguson\",\n    img: \"img/fighters/tony.png\",\n    clicked: false\n  },\n  {\n    name: \"Zabit Magnomedsharipov\",\n    img: \"img/fighters/zabit.png\",\n    clicked: false\n  },\n  {\n    name: \"Jorge Masvidal\",\n    img: \"img/fighters/jorge.png\",\n    clicked: false\n  }\n];\n\n//----- State Change -----//\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        score: 0\n      },\n      fighters: shuffleArray(initFighters)\n    };\n  }\n\n  onFighterClick = index => {\n    if (!this.state.fighters[index].clicked) {\n      this.setState({\n        fighters: shuffleArray(\n          this.state.fighters.map((fighter, current) => {\n            return current === index ? { ...fighter, clicked: true } : fighter;\n          })\n        ),\n        user: {\n          ...this.state.user,\n          score: this.state.user.score + 1\n        }\n      });\n    } else {\n      this.setState({\n        figthers: shuffleArray(\n          this.state.fighters.map(fighter => {\n            return { ...fighter, clicked: false };\n          })\n        ),\n        user: {\n          ...this.state.user,\n          score: 0\n        }\n      });\n    }\n  };\n\n  //----- Render ------//\n  render() {\n    return (\n      <div className=\"Main\">\n        <Score score={this.state.user.score} />\n        <FighterBox\n          fighters={this.state.fighters}\n          onFighterClick={this.onFighterClick}\n        />\n      </div>\n    );\n  }\n}\n","//----- Import -----//\nimport React from \"react\";\n\n//---- Header Component -----//\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <h2>UFC Fighter Clicky Game</h2>\n    </header>\n  );\n};\n\nexport default Header;\n","//----- Import -----//\nimport React, { Component } from \"react\";\nimport Main from \"./components/main/main\";\nimport Header from \"./components/header/header\";\nimport \"./App.css\";\n\n//----- Render -----//\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}